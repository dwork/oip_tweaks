<?php

/**
 *  Get the listing data for the listing displayed on this page
 */
function oip_tweaks_get_listing ($listingid) {
	global $user;

	// Check to see if the Orubtabke Flyer content type has been created yet.
	$query = new EntityFieldQuery();
	$query->entityCondition('entity_type', 'node')
	  ->entityCondition('bundle', 'listing')
	  ->propertyCondition('title', $listingid);
	$result = $query->execute();

	if (isset($result['node'])) {
	  	$listing = node_load(array_keys($result['node'])[0]);
		return $listing;
	}
}

/**
 *  Get user data for the listing displayed on this page
 *  $type = 'listingid' or 'agentid'
 */
function oip_tweaks_get_agent ($valueid, $type='agentid') {
	if ($type == 'listingid') {
		$listing = oip_tweaks_get_listing ($valueid);
		$wrapper = entity_metadata_wrapper ('node', $listing);
		$agentid = $wrapper->field_listingagentid->value();	
	} else {
		$agentid = $valueid;
	}
	
	// Now, retrieve the agent data
	$query = new EntityFieldQuery();
	$query->entityCondition('entity_type', 'user')
	  ->fieldCondition('field_agentid', 'value', $agentid, '=');
	$result = $query->execute();
	if ($result['user']) {
		$user = user_load(array_keys($result['user'])[0]);
 		return $user;
	}
}

/**
 *  Get an agency's logo, given the agent's uid or agent's user record
 */
function oip_tweaks_get_agency_logo ($user) {
	if ($pathwrapper = file_stream_wrapper_get_instance_by_uri('public://')) {
	  $publicpath = $pathwrapper->getExternalUrl();
	}
	$wrapper = entity_metadata_wrapper('user',$user);
	$agency = $wrapper->field_agency->value();
	return $publicpath . '/' . $agency->field_company_logo['und'][0]['filename'];
}

/**
 *   Printable flyer preprocess routine
 */
function oip_tweaks_get_printable_flyer ($listingid='') {
	global $user;
	
	if (strlen(trim($listingid))==0) {
		$ary = explode ('/',$_SERVER['REQUEST_URI']);
		$listingid = $ary[count($ary)-1];
	}

	// Check to see if the Orubtabke Flyer content type has been created yet.
	$query = new EntityFieldQuery();
	$query->entityCondition('entity_type', 'node')
	  ->entityCondition('bundle', 'printable_flyer')
	  ->propertyCondition('status', NODE_PUBLISHED)
	  ->propertyCondition('title', $listingid);
	$result = $query->execute();

	if (isset($result['node'])) {
		$items_nids = array_keys($result['node']);
	  	$flyers = entity_load('node', $items_nids);
		foreach ($flyers as $flyer) {
	  		RETURN $flyer;
		}
	} else {
		// Get the listing for fields that we need to populate
		// Check to see if the Orubtabke Flyer content type has been created yet.
		$listing = oip_tweaks_get_listing ($listingid);
		
		if ($listing) {	
			
				// Fields used by this routine
				$lwrapper = entity_metadata_wrapper('node',$listing);
				$adtitle = $lwrapper->field_adtitle->value();

				// Get agent info, we need the default printable flyer value
				$agentid = $lwrapper->field_listingagentid->value();
				$agent = oip_tweaks_get_agent ($agentid);
				$awrapper = entity_metadata_wrapper('user',$agent);
				if ($awrapper->__isset('field_default_flyer')) {
					$field_flyer = $awrapper->field_default_flyer->value();
				} else {
					$field_flyer = oip_tweaks_gettid('flyers','Classic Flyer');
				}
			    
				$showaddress = $lwrapper->field_internetaddress->value();
			    $city = $lwrapper->field_city->value();
			    $state = $lwrapper->field_state->value();
			    $zip = $lwrapper->field_zipcode->value();
			    if ($showaddress=='No') {
			      $address = "( Call Agent for Address )";
			    } else {
			      $address = $lwrapper->field_address->value();
			    }
				$address = $address  . "     $city, $state $zip";
				$beds = $lwrapper->field_beds->value();
				if ($beds == intval($beds)) {
					$beds = intval($beds);
				}
				($beds==1) ? ($bbs = '') : ($bbs = 's'); 
				$baths = $lwrapper->field_baths->value();
				if ($baths == intval($baths)) {
					$baths = intval($baths);
				}
				($baths==1) ? ($bts = '') : ($bts = 's'); 
				$bandb = '';
				if ($beds<>0 && $beds<>0.0) {
					if ($baths<>0 && $baths<>0.0) {
						$bandb = "$beds Bed$bbs $baths Bath$bts";
					} else {
						$bandb = "$beds Bed$bts";
					}
				} else {
					if ($baths<>0 && $baths<>0.0) {
						$bandb = "$baths Bath$bts";
					} else {
						$bandb = $beds . ' Beds ' . $baths . ' Baths ' . '(Default)';
					}					
				}
				$sqft = $lwrapper->field_sqft->value();
				$style = $lwrapper->field_style->value();
				$acres = $lwrapper->field_acreage->value();
				$familyroom = $lwrapper->field_familyroom->value();
				
				// Default "highlights"
				$highlights = array();
			    $type  =  $lwrapper->field_proptype->value()[0]->name;
			    switch ($type) {
					case 'Residential':
						$highlights[] = $bandb;
						$highlights[] = $sqft . ' sqft';
						$highlights[] = $acres . ' acres';
						$highlights[] = $style;
						break;
					case 'MultiFamily':
						$highlights[] = $banb;
						break;
					case 'Land':
						break;
					case 'Commercial':
						break;
					default:
						break;
				}
				while (count($highlights) < 8) {		// Need 8 values
					$highlights[] = '';
				}
				
				$description = $lwrapper->body->value->value(array('sanitize' => TRUE));
		} else {
			$adtitle = 'ERROR: No listing loaded - ' . $listingid;
		}
		
		// Create a new entry
		$values = array(
		  'type' => 'printable_flyer',
		  'uid' => $user->uid,
		  'status' => 1,
		  'comment' => 1,
		  'promote' => 0,
		);
		$flyer_data = entity_create('node', $values);
		$ewrapper = entity_metadata_wrapper('node', $flyer_data);
		$ewrapper->title->set($listingid);
		$ewrapper->field_adtitle = $adtitle;
		$ewrapper->field_flyer_address = $address;
		$ewrapper->field_description = $description;
		$ewrapper->field_highlight = $highlights;
		$ewrapper->field_flyer = $field_flyer;
		$ewrapper->save();
		return $flyer_data;
	}
}

/**
 * Implement hook_form_views-exposed_form_alter
 * We need to override the selection arrays to omit "Real Estate"
 *
 *  DCW 11/29/2014  Add oip_get_stats to retrieve listing_statistics for a particular listing
 */

/**
 *  Format the agent and phone# for display in views
 */
function oip_tweaks_format_agent ($agentid) {
  $node = node_load($agentid);
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'user')
    ->fieldCondition('field_agentid', 'value', $node->field_listingagentid['und'][0]['value'], '=');
  $result = $query->execute();

  if (isset($result['user'])) {
    $user = user_load(current(array_keys($result['user'])));
    $agent = $user->field_firstname['und'][0]['value'].' '.$user->field_lastname['und'][0]['value'].' '.oip_tweaks_format_phone($user->field_phone['und'][0]['number']);
  } else {
    $agent = "Not found: $data->field_listingagentid['und'][0]['value']";
  }
  return $agent;
}

/**
 *  Format the phone# for display in views
 */
function oip_tweaks_format_phone($phone)
{
	$phone = preg_replace("/[^0-9]/", "", $phone);
 
	if(strlen($phone) == 7)
		return preg_replace("/([0-9]{3})([0-9]{4})/", "$1-$2", $phone);
	elseif(strlen($phone) == 10)
		return preg_replace("/([0-9]{3})([0-9]{3})([0-9]{4})/", "($1) $2-$3", $phone);
	else
		return $phone;
}

/**    
 *  Accumulator routine for listing statistics
 *  Given a particular listing, count hits between dates and of type "listing_type" 
 *  Default: if $listing_type is blank, choose all. Else "Listing" or "Flyer"
 */
function oip_get_stats ($listing_id, $from_date, $to_date=0, $listing_type='All') {
   if ($to_date == 0) {  // asking for the entire month
      $yyyy = substr($from_date,0,4);
      $mm = substr($from_date,4,2);
      $f_date = mktime(0,0,0,$mm,1,$yyyy);
      $meday = date('t',mktime(0,0,0,$mm,1,$yyyy));     // Ymt .. t = # days in the month
      $t_date = mktime(23,59,59,$mm,$meday,$yyyy);    
   } else {
      $yyyy = substr($from_date,0,4);
      $mm = substr($from_date,4,2);
      $dd = substr($from_date,6,2);
      $f_date = mktime(0,0,0,$mm,$dd,$yyyy);
      $yyyy = substr($to_date,0,4);
      $mm = substr($to_date,4,2);
      $dd = substr($to_date,6,2);
      $t_date = mktime(23,59,59,$mm,$dd,$yyyy);
   }

   $query = new EntityFieldQuery();

   if ($listing_type=='All') {

      $count = $query
        ->entityCondition('entity_type', 'node')
        ->entityCondition('bundle','listing_statistics')
        ->propertyCondition('title', $listing_id)
        ->fieldCondition('field_date', 'value', $f_date, '>=')
        ->fieldCondition('field_date', 'value', $t_date, '<=')
        ->addMetaData('account', user_load(1))
        ->count() 
        ->execute();
 
      return $count;

   } else {

      $count = $query
        ->entityCondition('entity_type', 'node')
        ->entityCondition('bundle','listing_statistics')
        ->propertyCondition('title',$listing_id,'=')
        ->fieldCondition('field_date', 'value', $f_date, '>=')
        ->fieldCondition('field_date', 'value', $t_date, '<=')
        ->fieldCondition('field_view_type', 'value', $listing_type, '=')
        ->addMetaData('account', user_load(1))
        ->count() 
        ->execute();
      return $count;

   }
}

//-----------------------------------------------------------------------------------------
// For each member, accumulate and send out an email with current stats for each listing (listings with stats from last month and earlier, but only for listings with stats last month

function oip_tweaks_send_statisics () {
     // Open users
     $query = new EntityFieldQuery();
     $query->entityCondition('entity_type', 'user')
           ->propertyCondition('status',1);
     $result = $query->execute();
     foreach($result['user'] as $this_user) {
         $user = user_load ($this_user->uid);
         if ($user->uid == 2) {
            if (isset($user->roles['5'])
             or isset($user->roles['6'])
             or isset($user->roles['9'])  ) 
            {
               $body = _get_listings_at_monthend ($user);
               $to = $user->mail;           // email address
               $name = $user->name;           // login user name
               $fullname = $user->field_firstname['und']['0']['value'] . ' ' . $user->field_lastname['und']['0']['value'];
               $to = $user->mail;
               $fromdate = date('M Y',strtotime('-1 month'));
               $todate = date('M Y',strtotime('-6 months'));
               $body = "<strong>Statistics for $fullname at $to<BR>$todate to $fromdate<BR><BR>$body"; 
               $to = 'hotsheet@oip.net';
               $subject = t('Month-end OIP Statistics ');
               $from = 'dwork@oip.net';
               $cc = 'dwork@oip.net';
               $bcc = 'dwork@oip.net';
               // references module "rets_bsf" for mail_hook - see rest_bsf.includes
               $message = drupal_mail('rets_bsf', 'Monthend OIP Statistics', $to, user_preferred_language($user), array('body' => $body, 'subject' => $subject, 'headers' => array('cc' => $cc, 'Bcc' => $bcc)), $from, TRUE);

          }
        }
     }
}

function _get_listings_at_monthend ($user) {
      global $totals, $listingcount;
      $totals = array();                     // define and clear totals array
      for ($i=0; $i<=6; $i++) {
          $totals[$i] = 0;
       }
       $listingcount = 0;
 
      $mail = $user->mail;           // email address
      $name = $user->name;           // login user name
      $fullname = $user->field_firstname['und']['0']['value'] . ' ' . $user->field_lastname['und']['0']['value'];
      $query = new EntityFieldQuery();
      $query
        ->entityCondition('entity_type', 'node')
        ->entityCondition('bundle','listing')
        ->propertyCondition('status', NODE_PUBLISHED);
      $result=$query->execute();
      $str = '';
      if (isset($result['node'])) {
        foreach ($result['node'] as $listing) {
             $listing_node = entity_load_single('node', $listing->nid);
             $str = $str . _get_listing_stats_at_monthend ($listing_node);
        }
        if (strlen(trim($str)) == 0) {         // no listings
           $str = "Sorry, no listing statistics on file for you for the past 6 months";
        } else {
           $columns = "<TR><TH>Listing</TH>";
           $columns = $columns . "<th>" . date('M Y',strtotime('-1 month')) . "</th>";
           $columns = $columns . "<th>" . date('M Y',strtotime('-2 months')). "</th>";
           $columns = $columns . "<th>" . date('M Y',strtotime('-3 months')). "</th>";
           $columns = $columns . "<th>" . date('M Y',strtotime('-4 months')). "</th>";
           $columns = $columns . "<th>" . date('M Y',strtotime('-5 months')). "</th>";
           $columns = $columns . "<th>" . date('M Y',strtotime('-6 months')). "</th>";
           $columns = $columns . "<th>6 mo Total</th></TR>";

           // Finish up the HTML wrappers
           $str = "<TABLE>$columns $str <TR><TD>Totals</TD>";
           for ($i=0; $i<=6; $i++) {
              $str = $str . "<TD align=right>$totals[$i]</TD>";
           }
           $str = $str . "</TR></TABLE>";
           $str = $str . "<BR>$listingcount listings included in 6 month summary.";
        }
     } else {
         $str = "Sorry, no listings on file for you";
     }
     return $str;
}

// return a string of counts for this listing
function _get_listing_stats_at_monthend ($listing_node) {
   global $totals, $listingcount;
   $title = $listing_node->title;
   $address = $listing_node->field_address['und']['0']['value'] . ' ' .  $listing_node->field_city['und']['0']['value'];
   $date = date('Ym',strtotime("-1 month"));            // since this triggers on 1st day of month, get last month's stats
   $count = oip_get_stats($title,$date);
   if ($count == 0) {
      return '';
   } else {
      $date = date('Ym',strtotime("-2 months"));            // since this triggers on 1st day of month, get last month's stats
      $count1 = oip_get_stats($title,$date);
      $date = date('Ym',strtotime("-3 months"));            
      $count2 = oip_get_stats($title,$date);
      $date = date('Ym',strtotime("-4 months"));       
      $count3 = oip_get_stats($title,$date);
      $date = date('Ym',strtotime("-5 months"));       
      $count4 = oip_get_stats($title,$date);
      $date = date('Ym',strtotime("-6 months"));          
      $count5 = oip_get_stats($title,$date);
      $total = $count+$count1+$count2+$count3+$count4+$count5;
      // Build reporting string
      $str = "<TR><TD>$title $address</TD>";
      $str = $str . '<TD align=right>'.$count.'</TD>';
      $str = $str . '<TD align=right>'.$count1.'</TD>';
      $str = $str . '<TD align=right>'.$count2.'</TD>';
      $str = $str . '<TD align=right>'.$count3.'</TD>';
      $str = $str . '<TD align=right>'.$count4.'</TD>';
      $str = $str . '<TD align=right>'.$count5.'</TD>';
      $str = $str . '<TD align=right>'.$total.'</TD></TR>';
      // Accumulate total array
      $totals[0] = $totals[0]+$count;
      $totals[1] = $totals[1]+$count1;
      $totals[2] = $totals[2]+$count2;
      $totals[3] = $totals[3]+$count3;
      $totals[4] = $totals[4]+$count4;
      $totals[5] = $totals[5]+$count5;
      $totals[6] = $totals[6]+$total;
      $listingcount++;                   
   }
   return $str;
}

//-----------------------------------------------------------------------------
// Tweak views
function oip_tweaks_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == 'views_exposed_form') {
    if ($form_state['view']->name == 'listings') {
        $form['field_listprice_value']['min']['#size']='4';
        $form['field_listprice_value']['max']['#size']='4';
        $form['field_city_value']['#size']='20';
        $form['field_beds_value']['#size']='3';
        $form['field_baths_value']['#size']='3';
        $form['field_sqft_value']['#size']='3';
        $form['field_acreage_value']['#size']='3';
    }
    if ($form_state['view']->name == 'business_directory') {
      // Get the list of categories
	$taxonomyQuery = new EntityFieldQuery();
  	$taxonomyTerms = $taxonomyQuery
		->entityCondition('entity_type', 'taxonomy_term')
    		->propertyCondition('vid', 6) //Company Type
    		->execute();
	foreach ($taxonomyTerms['taxonomy_term'] as $tid => $term) {
          $tids[] = $term->tid;
        }
	$ary = taxonomy_term_load_multiple($tids);
	$options = array();
        foreach ($ary as $fields) {
	  if ($fields->name <> 'Real Estate') {
	    // Now, we need to see if the taxonomy term is on at least one active entity
	      $query = new EntityFieldQuery();
	      $query
		 ->entityCondition('entity_type','user') 
		 ->propertyCondition('status',1)
		 ->fieldCondition('field_usertype','tid',$fields->tid,'=')
		 ->count();
	    if ($query->execute()>0) {
	      $options[$fields->tid] = $fields->name;
	    }
	  }
	}
      $form['field_usertype_tid'] = array( 
        '#type' => 'select',
        '#multiple' => 'select',
        '#options' => $options,
        '#size' => 4,
        '#default_value' => $options,
      );
    }
  }
}

/**
 * Returns field values as actual entities where possible,
 * also allows selection of individual items to be returned
 */
function field_fetch_field_values($entity_type, $entity, $field_name, $get_delta = NULL, $get_key = NULL) {
  $values = array();
  if (isset($entity->$field_name) && !empty($entity->$field_name)) {
    foreach (field_get_items($entity_type, $entity, $field_name) as $delta => $item) {
      $value = $item;
      $keys = array_keys($item);
      if (count($keys)==1) {
        $key = $keys[0];
        switch ($key) {
          case 'nid':
            $value = array_shift(entity_load('node', array($item[$key])));
            break;
          case 'uid':
            $value = array_shift(entity_load('user', array($item[$key])));
            break;
          case 'tid':
            $ary = entity_load('taxonomy_term', array($item[$key]));
            $value = array_shift($ary);
            break;
          case 'vid':
            $value = array_shift(entity_load('taxonomy_vocabulary', array($item[$key])));
            break;
          case 'value':
            $value = $item['value'];
            break;
        }
      }
      else {
        if ($get_key && isset($item[$get_key])) {
          $value = $item[$get_key];
        }
        elseif (array_key_exists('value', $item)) {
          $value = isset($item['safe_value']) ? $item['safe_value'] : $item['value'];
        }
      }
      $values[$delta] = $value;
    }
  }
  if (is_numeric($get_delta)) {
    return isset($values[$get_delta]) ? $values[$get_delta] : NULL;
  }
  return $values;
}

## Dollarfy Function
function oip_tweaks_dollarfy ($num,$dec=0) {
	 
	$format="%.$dec" . "f";  
        $number=sprintf($format,$num);
        $str=strtok($number,".");
        $dc=strtok(".");      
        $str=commify($str);
        $return="\$&nbsp;$str";

        if ($dec!=0) { 
                $return = "$return" . ".$dc";
        } 
        return($return); 
}

## Commify Function
function oip_tweaks_commify ($str) { 
        $n = strlen($str); 
        if ($n <= 3) { 
                $return=$str;
        } 
        else { 
                $pre=substr($str,0,$n-3); 
                $post=substr($str,$n-3,3); 
                $pre=commify($pre); 
                $return="$pre,$post"; 
        }
        return($return); 
}

## Shorthand entity print
function oip_tweaks_entity ($str, $type = 'value') {
 	if (isset($str['und'])) {
		$fld = $str['und'][0][$type];
	} else {
		$fld = '';
	} 
  	return $fld;
}

function oip_tweaks_gettid ($vname, $name) {

  $voc = taxonomy_vocabulary_machine_name_load($vname);
  $query = new EntityFieldQuery;
  $result = $query
  ->entityCondition('entity_type', 'taxonomy_term')
  ->propertyCondition('name', $name)
  ->propertyCondition('vid', $voc->vid)
  ->execute();
  if ($result) {
    $keys = array_keys($result['taxonomy_term']);
  } else {
    drupal_set_message(t('Error: oip_tweaks_gettid (oip_tweaks.module): Taxonomy term not found -- vname: '. $vname .'; name: '.$name));
    return '';
  }
  return $keys[0];
}

// Get RMLS photo
function oip_tweaks_get_bsfphoto($id,$num) {
	// Pulls listing picture from OIPRETS
	$show = '';
	if ($num) {
		$show = '&show=' . $num;
	}
	$ch = curl_init();
 	$timeout = 0; // set to zero for no timeout
 	curl_setopt ($ch, CURLOPT_URL, "http://www.oiprets.com/rets_bsf/bsfphotos.php?debug=0&id=$id$show");
 	curl_setopt ($ch, CURLOPT_RETURNTRANSFER, 1);
 	curl_setopt ($ch, CURLOPT_CONNECTTIMEOUT, $timeout);
 	$file_contents = curl_exec($ch);
 	curl_close($ch);
 	return $file_contents;
}

?>
